[{"path":"https://pharmaverse.github.io/envsetup/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/envsetup/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://pharmaverse.github.io/envsetup/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://pharmaverse.github.io/envsetup/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://pharmaverse.github.io/envsetup/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://pharmaverse.github.io/envsetup/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://pharmaverse.github.io/envsetup/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://pharmaverse.github.io/envsetup/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://pharmaverse.github.io/envsetup/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://pharmaverse.github.io/envsetup/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://pharmaverse.github.io/envsetup/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright 2025 Johnson & Johnson Innovative Medicine and Atorus Research, Inc.  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"basic-autos-configuration","dir":"Articles","previous_headings":"","what":"Basic AUTOS Configuration","title":"Automatic Script Sourcing","text":"Note: default, auto-sourcing overwrite existing functions name. behavior can controlled overwrite parameter underlying functions, though typically managed automatically system.","code":"default:   autos:     script_library: '/path/to/your/scripts'"},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"working-example-single-script-library","dir":"Articles","previous_headings":"","what":"Working Example: Single Script Library","title":"Automatic Script Sourcing","text":"Let’s create practical example Tidy McVerse custom functions script library:","code":"library(envsetup)  # Create temporary directory structure dir <- fs::file_temp() dir.create(dir) dir.create(file.path(dir, \"/demo/DEV/username/project1/script_library\"), recursive = TRUE)  # Create a custom function file_conn <- file(file.path(dir, \"/demo/DEV/username/project1/script_library/test.R\")) writeLines( \"test <- function(){print('Hello from auto-sourced function!')}\", file_conn) close(file_conn)  # Write the configuration config_path <- file.path(dir, \"_envsetup.yml\") file_conn <- file(config_path) writeLines(   paste0( \"default:   autos:     dev_script_library: '\", dir,\"/demo/DEV/username/project1/script_library'\"   ), file_conn) close(file_conn)"},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"loading-and-using-auto-sourced-functions","dir":"Articles","previous_headings":"","what":"Loading and Using Auto-Sourced Functions","title":"Automatic Script Sourcing","text":"auto-sourced functions now available:","code":"# Load configuration and apply it envsetup_config <- config::get(file = config_path) rprofile(envsetup_config) #> Assigned paths to __callr_data__Assigned paths to R_GlobalEnv #> Sourcing file:  '/tmp/RtmpFdFZLz/file1f2a7706cd5c/demo/DEV/username/project1/script_library/test.R'  #>  #>  The following objects are added to .GlobalEnv: #>  #>     'test' # See what functions are available objects() #> [1] \"auto_stored_envsetup_config\" \"config_path\"                 #> [3] \"dir\"                         \"envsetup_config\"             #> [5] \"file_conn\"                   \"test\"  # Use the function directly (no manual sourcing needed!) test() #> [1] \"Hello from auto-sourced function!\""},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"multiple-script-libraries","dir":"Articles","previous_headings":"","what":"Multiple Script Libraries","title":"Automatic Script Sourcing","text":"Real projects often multiple script libraries different purposes:","code":"# Create production script library dir.create(file.path(dir, \"/demo/PROD/project1/script_library\"), recursive = TRUE)  # Add production functions file_conn <- file(file.path(dir, \"/demo/PROD/project1/script_library/test2.R\")) writeLines( \"test2 <- function(){print('Hello from production function!')}\", file_conn) close(file_conn)  # Update configuration with multiple libraries file_conn <- file(config_path) writeLines(   paste0( \"default:   autos:     dev_script_library: '\", dir,\"/demo/DEV/username/project1/script_library'     prod_script_library: '\", dir,\"/demo/PROD/project1/script_library'\"   ), file_conn) close(file_conn)  # Reload configuration envsetup_config <- config::get(file = config_path) rprofile(envsetup_config) #> Assigned paths to __callr_data__Assigned paths to R_GlobalEnv #> Sourcing file:  '/tmp/RtmpFdFZLz/file1f2a7706cd5c/demo/DEV/username/project1/script_library/test.R'  #>  #>  The following objects are added to .GlobalEnv: #>  #>     'test' #>  #> Sourcing file:  '/tmp/RtmpFdFZLz/file1f2a7706cd5c/demo/PROD/project1/script_library/test2.R'  #>  #>  The following objects are added to .GlobalEnv: #>  #>     'test2'"},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"using-multiple-libraries","dir":"Articles","previous_headings":"","what":"Using Multiple Libraries","title":"Automatic Script Sourcing","text":"","code":"# Check search path - now includes both libraries # Functions from both libraries are available objects() #> [1] \"auto_stored_envsetup_config\" \"config_path\"                 #> [3] \"dir\"                         \"envsetup_config\"             #> [5] \"file_conn\"                   \"test\"                        #> [7] \"test2\"  # Use functions from both libraries test()   # From dev library #> [1] \"Hello from auto-sourced function!\" test2()  # From prod library #> [1] \"Hello from production function!\""},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"understanding-function-conflicts-and-the-overwrite-parameter","dir":"Articles","previous_headings":"","what":"Understanding Function Conflicts and the Overwrite Parameter","title":"Automatic Script Sourcing","text":"auto-sourcing functions, might encounter situations function names conflict existing objects environment. overwrite parameter controls conflicts handled.","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"quick-example-of-function-conflicts","dir":"Articles","previous_headings":"Understanding Function Conflicts and the Overwrite Parameter","what":"Quick Example of Function Conflicts","title":"Automatic Script Sourcing","text":"output shows detailed information overwritten, helping track conflicts.","code":"# Create a function that might conflict summary_stats <- function(data) {   print(\"Original summary function\") }  # Create a script with the same function name conflict_dir <- file.path(dir, \"conflict_demo\") dir.create(conflict_dir)  file_conn <- file(file.path(conflict_dir, \"stats.R\")) writeLines( \"summary_stats <- function(data) {   print('Updated summary function from the new conflict_demo script') }\", file_conn) close(file_conn)  # Add to configuration file_conn <- file(config_path) writeLines(   paste0( \"default:   autos:     dev_script_library: '\", dir,\"/demo/DEV/username/project1/script_library'     prod_script_library: '\", dir,\"/demo/PROD/project1/script_library'     conflict_demo: '\", conflict_dir, \"'\"   ), file_conn) close(file_conn)  # When we reload, the auto-sourced version will overwrite the original envsetup_config <- config::get(file = config_path) rprofile(envsetup_config) #> Assigned paths to __callr_data__Assigned paths to R_GlobalEnv #> Sourcing file:  '/tmp/RtmpFdFZLz/file1f2a7706cd5c/demo/DEV/username/project1/script_library/test.R'  #>  #>  The following objects are added to .GlobalEnv: #>  #>     'test' #>  #> Sourcing file:  '/tmp/RtmpFdFZLz/file1f2a7706cd5c/demo/PROD/project1/script_library/test2.R'  #>  #>  The following objects are added to .GlobalEnv: #>  #>     'test2' #>  #> Sourcing file:  '/tmp/RtmpFdFZLz/file1f2a7706cd5c/conflict_demo/stats.R'  #>  #>  The following objects are added to .GlobalEnv: #>  #>     'summary_stats' #>  #>  The following objects were overwritten in .GlobalEnv: #>  #>     'summary_stats'  # Test which version we have now summary_stats() #> [1] \"Updated summary function from the new conflict_demo script\""},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"environment-specific-auto-sourcing","dir":"Articles","previous_headings":"","what":"Environment-Specific Auto-Sourcing","title":"Automatic Script Sourcing","text":"might want different script libraries different environments. example, exclude development functions running production: can see now production functions available:","code":"# Configuration that blanks out dev scripts in production file_conn <- file(config_path) writeLines(   paste0( \"default:   autos:     dev_script_library: '\", dir,\"/demo/DEV/username/project1/script_library'     prod_script_library: '\", dir,\"/demo/PROD/project1/script_library'  prod:   autos:     dev_script_library: NULL\"  # NULL disables this library   ), file_conn) close(file_conn)  # Load production configuration envsetup_config <- config::get(file = config_path, config = \"prod\") rprofile(envsetup_config) #> Assigned paths to __callr_data__Assigned paths to R_GlobalEnv #> Sourcing file:  '/tmp/RtmpFdFZLz/file1f2a7706cd5c/demo/PROD/project1/script_library/test2.R'  #>  #>  The following objects are added to .GlobalEnv: #>  #>     'test2' # Functions from production only objects() #> [1] \"auto_stored_envsetup_config\" \"config_path\"                 #> [3] \"conflict_dir\"                \"dir\"                         #> [5] \"envsetup_config\"             \"file_conn\"                   #> [7] \"test2\"  # Use functions from production only test2()  # From prod library #> [1] \"Hello from production function!\""},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"how-auto-sourcing-works","dir":"Articles","previous_headings":"","what":"How Auto-Sourcing Works","title":"Automatic Script Sourcing","text":"call rprofile() autos configuration: Script Discovery: Finds .R files specified directories Conflict Detection: Compares new functions existing global environment objects Automatic Sourcing: Sources script environment overwrite = FALSE: Preserves existing functions reports skipped . Metadata Tracking: Records script function came debugging Function Availability: Functions become directly accessible","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"technical-details-of-conflict-handling","dir":"Articles","previous_headings":"How Auto-Sourcing Works","what":"Technical Details of Conflict Handling","title":"Automatic Script Sourcing","text":"auto-sourcing system uses sophisticated approach handle conflicts: Temporary Environment: script first sourced temporary environment Object Comparison: New objects compared global environment Selective Assignment: specified objects moved global environment Metadata Recording: function’s source script recorded object_metadata Detailed Reporting: Users receive clear feedback added, skipped, overwritten Cleanup Integration: Metadata enables precise cleanup using detach_autos() record_function_metadata() function creates comprehensive audit trail maintaining data frame : object_name: name sourced function script: full path source script automatically updated functions overwritten newer versions","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"benefits-of-auto-sourcing","dir":"Articles","previous_headings":"","what":"Benefits of Auto-Sourcing","title":"Automatic Script Sourcing","text":"Manual Sourcing: Functions automatically available Organized Libraries: Separate environments different script collections Environment Isolation: Functions don’t interfere Dynamic Loading: Easy add/remove script libraries Team Collaboration: Shared function libraries across team members Comprehensive Tracking: Metadata system tracks function sources debugging Intelligent Cleanup: Precise removal auto-sourced functions via metadata","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"project-utilities","dir":"Articles","previous_headings":"Common Use Cases","what":"Project Utilities","title":"Automatic Script Sourcing","text":"","code":"autos:   project_utils: '/project/utilities'   data_processing: '/project/data_functions'   plotting_functions: '/project/viz_functions'"},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"environment-specific-functions","dir":"Articles","previous_headings":"Common Use Cases","what":"Environment-Specific Functions","title":"Automatic Script Sourcing","text":"","code":"default:   autos:     dev_helpers: '/dev/helper_functions'     shared_utils: '/shared/utilities'  prod:   autos:     shared_utils: '/shared/utilities'     # dev_helpers excluded in production"},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"team-libraries","dir":"Articles","previous_headings":"Common Use Cases","what":"Team Libraries","title":"Automatic Script Sourcing","text":"","code":"autos:   team_functions: '/shared/team_library'   personal_utils: '~/my_r_functions'   project_specific: './project_functions'"},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"managing-function-conflicts-with-the-overwrite-parameter","dir":"Articles","previous_headings":"","what":"Managing Function Conflicts with the Overwrite Parameter","title":"Automatic Script Sourcing","text":"overwrite parameter controls auto-sourcing handles situations functions name already exist global environment. Understanding parameter crucial managing function conflicts effectively.","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"default-behavior-overwrite-true","dir":"Articles","previous_headings":"Managing Function Conflicts with the Overwrite Parameter","what":"Default Behavior: Overwrite = TRUE","title":"Automatic Script Sourcing","text":"default, auto-sourcing overwrite existing functions:","code":"# Create a function in global environment my_function <- function() {   print(\"Original function from global environment\") }  # Check it works my_function() #> [1] \"Original function from global environment\"  # Create a script with the same function name dir <- fs::file_temp() dir.create(dir) script_dir <- file.path(dir, \"scripts\") dir.create(script_dir)  file_conn <- file(file.path(script_dir, \"my_function.R\")) writeLines( \"my_function <- function() {   print('Updated function from auto-sourced script') }\", file_conn) close(file_conn)  # Configuration with default overwrite = TRUE config_path <- file.path(dir, \"_envsetup.yml\") file_conn <- file(config_path) writeLines(   paste0( \"default:   autos:     my_scripts: '\", script_dir, \"'\"   ), file_conn) close(file_conn)  # Load configuration - this will overwrite the existing function envsetup_config <- config::get(file = config_path) rprofile(envsetup_config) #> Assigned paths to __callr_data__Assigned paths to R_GlobalEnv #> Sourcing file:  '/tmp/RtmpFdFZLz/file1f2a787c306f/scripts/my_function.R'  #>  #>  The following objects are added to .GlobalEnv: #>  #>     'my_function' #>  #>  The following objects were overwritten in .GlobalEnv: #>  #>     'my_function'  # The function has been overwritten my_function() #> [1] \"Updated function from auto-sourced script\""},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"conservative-behavior-overwrite-false","dir":"Articles","previous_headings":"Managing Function Conflicts with the Overwrite Parameter","what":"Conservative Behavior: Overwrite = FALSE","title":"Automatic Script Sourcing","text":"overwrite = FALSE, existing functions preserved:","code":"# clean up previous runs, removing all previously attached autos detach_autos()  # Create a function in global environment my_function <- function() {   print(\"Original function from global environment\") }  # Check it works my_function() #> [1] \"Original function from global environment\"  # Create a script with the same function name dir <- fs::file_temp() dir.create(dir) script_dir <- file.path(dir, \"scripts\") dir.create(script_dir)  file_conn <- file(file.path(script_dir, \"my_function.R\")) writeLines( \"my_function <- function() {   print('Updated function from auto-sourced script') }\", file_conn) close(file_conn)  # Configuration with default overwrite = FALSE config_path <- file.path(dir, \"_envsetup.yml\") file_conn <- file(config_path) writeLines(   paste0( \"default:   autos:     my_scripts: '\", script_dir, \"'\"   ), file_conn) close(file_conn)  envsetup_config <- config::get(file = config_path) rprofile(envsetup_config, overwrite = FALSE) #> Assigned paths to __callr_data__Assigned paths to R_GlobalEnv #> Sourcing file:  '/tmp/RtmpFdFZLz/file1f2a6fd3aaaf/scripts/my_function.R'  #>  #>  The following objects were not added to .GlobalEnv as they already exist: #>  #>     'my_function'  my_function() #> [1] \"Original function from global environment\""},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"understanding-conflict-detection","dir":"Articles","previous_headings":"Managing Function Conflicts with the Overwrite Parameter","what":"Understanding Conflict Detection","title":"Automatic Script Sourcing","text":"auto-sourcing system provides detailed feedback happens sourcing:","code":"# Create multiple functions to demonstrate conflict detection existing_func1 <- function() \"I exist in global\" existing_func2 <- function() \"I also exist in global\"  # Create script with mix of new and conflicting functions file_conn <- file(file.path(script_dir, \"mixed_functions.R\")) writeLines( \"# This will conflict with existing function existing_func1 <- function() {   'Updated from script' }  # This is a new function new_func <- function() {   'Brand new function' }  # This will also conflict existing_func2 <- function() {   'Also updated from script' }\", file_conn) close(file_conn)  # Update configuration file_conn <- file(config_path) writeLines(   paste0( \"default:   autos:     my_scripts: '\", script_dir, \"'\"   ), file_conn) close(file_conn)  # Reload - watch the detailed output envsetup_config <- config::get(file = config_path) rprofile(envsetup_config) #> Assigned paths to __callr_data__Assigned paths to R_GlobalEnv #> Sourcing file:  '/tmp/RtmpFdFZLz/file1f2a6fd3aaaf/scripts/mixed_functions.R'  #>  #>  The following objects are added to .GlobalEnv: #>  #>     'existing_func1', 'existing_func2', 'new_func' #>  #>  The following objects were overwritten in .GlobalEnv: #>  #>     'existing_func1', 'existing_func2' #>  #> Sourcing file:  '/tmp/RtmpFdFZLz/file1f2a6fd3aaaf/scripts/my_function.R'  #>  #>  The following objects are added to .GlobalEnv: #>  #>     'my_function' #>  #>  The following objects were overwritten in .GlobalEnv: #>  #>     'my_function'"},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"function-metadata-tracking","dir":"Articles","previous_headings":"","what":"Function Metadata Tracking","title":"Automatic Script Sourcing","text":"auto-sourcing system includes sophisticated metadata tracking records detailed information every function gets sourced. tracking system invaluable debugging, auditing, understanding function ecosystem.","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"how-metadata-tracking-works","dir":"Articles","previous_headings":"Function Metadata Tracking","what":"How Metadata Tracking Works","title":"Automatic Script Sourcing","text":"Every time function sourced autos system, record_function_metadata() function captures: Object Name: name function object Source Script: full path script file contains function information stored special object_metadata data frame within envsetup_environment.","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"accessing-function-metadata","dir":"Articles","previous_headings":"Function Metadata Tracking","what":"Accessing Function Metadata","title":"Automatic Script Sourcing","text":"","code":"# After sourcing functions, you can access the metadata # Note: This example shows the concept - actual access depends on envsetup internals  # Create some functions to demonstrate metadata tracking metadata_demo_dir <- file.path(dir, \"metadata_demo\") dir.create(metadata_demo_dir)  # Create multiple scripts with different functions file_conn <- file(file.path(metadata_demo_dir, \"data_functions.R\")) writeLines( \"load_data <- function(file) {   paste('Loading data from:', file) }  clean_data <- function(data) {   paste('Cleaning data with', nrow(data), 'rows') }\", file_conn) close(file_conn)  file_conn <- file(file.path(metadata_demo_dir, \"plot_functions.R\")) writeLines( \"create_plot <- function(data) {   paste('Creating plot for', ncol(data), 'variables') }  save_plot <- function(plot, filename) {   paste('Saving plot to:', filename) }\", file_conn) close(file_conn)  # Update configuration to include metadata demo file_conn <- file(config_path) writeLines(   paste0( \"default:   autos:     metadata_demo: '\", metadata_demo_dir, \"'\"   ), file_conn) close(file_conn)  # Source the functions envsetup_config <- config::get(file = config_path) rprofile(envsetup_config) #> Assigned paths to __callr_data__Assigned paths to R_GlobalEnv #> Sourcing file:  '/tmp/RtmpFdFZLz/file1f2a6fd3aaaf/metadata_demo/data_functions.R'  #>  #>  The following objects are added to .GlobalEnv: #>  #>     'clean_data', 'load_data' #>  #> Sourcing file:  '/tmp/RtmpFdFZLz/file1f2a6fd3aaaf/metadata_demo/plot_functions.R'  #>  #>  The following objects are added to .GlobalEnv: #>  #>     'create_plot', 'save_plot'  # The system now tracks which script each function came from cat(\"Functions sourced with metadata tracking:\") #> Functions sourced with metadata tracking: knitr::kable(envsetup_environment$object_metadata)"},{"path":[]},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"debugging-function-issues","dir":"Articles","previous_headings":"Function Metadata Tracking > Benefits of Metadata Tracking","what":"1. Debugging Function Issues","title":"Automatic Script Sourcing","text":"function isn’t working expected, metadata helps quickly identifyw hich script file contains function","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"audit-trail","dir":"Articles","previous_headings":"Function Metadata Tracking > Benefits of Metadata Tracking","what":"2. Audit Trail","title":"Automatic Script Sourcing","text":"Metadata provides complete audit trail function ecosystem.","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"metadata-and-the-detach_autos-function","dir":"Articles","previous_headings":"Function Metadata Tracking","what":"Metadata and the detach_autos() Function","title":"Automatic Script Sourcing","text":"metadata tracking system integrates closely cleanup operations: Identify auto-sourced functions Remove global environment Clean metadata records","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/auto_sourcing.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Automatic Script Sourcing","text":"Even though functions part package, follow best practices ensure functions work expected. Use Clear Names: Library names indicate purpose Monitor Conflicts: Regularly check resolve function name conflicts Document Functions: Include roxygen2 comments functions Test Functions: Ensure auto-sourced functions work correctly Package Prefix: Use package prefix writing functions, example, dplyr::filter","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/basic_paths.html","id":"understanding-path-configuration","dir":"Articles","previous_headings":"","what":"Understanding Path Configuration","title":"Basic Path Configuration","text":"guide walks set basic path configurations _envsetup.yml file.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/envsetup/articles/basic_paths.html","id":"level-1-execution-environment","dir":"Articles","previous_headings":"Understanding Path Configuration > Configuration Structure Levels","what":"Level 1: Execution Environment","title":"Basic Path Configuration","text":"Scripts typically execute different environments depending workflow:","code":"default:  dev:  qa:  prod:"},{"path":"https://pharmaverse.github.io/envsetup/articles/basic_paths.html","id":"level-2-paths-and-autos","dir":"Articles","previous_headings":"Understanding Path Configuration > Configuration Structure Levels","what":"Level 2: Paths and Autos","title":"Basic Path Configuration","text":"execution environment can different configurations:","code":"default:   paths:   autos:  dev:   paths:   autos:  qa:   paths:   autos:  prod:   paths:   autos:"},{"path":"https://pharmaverse.github.io/envsetup/articles/basic_paths.html","id":"level-3-specific-configuration","dir":"Articles","previous_headings":"Understanding Path Configuration > Configuration Structure Levels","what":"Level 3: Specific Configuration","title":"Basic Path Configuration","text":"Configure actual environment settings:","code":"default:   paths:     data: \"/demo/DEV/username/project1/data\"     output: \"/demo/DEV/username/project1/output\"     programs: \"/demo/DEV/username/project1/programs\""},{"path":"https://pharmaverse.github.io/envsetup/articles/basic_paths.html","id":"working-example","dir":"Articles","previous_headings":"Understanding Path Configuration","what":"Working Example","title":"Basic Path Configuration","text":"Let’s create practical example project called project1 needs data input, result output, program storage locations.","code":"library(envsetup)  # Create temporary directory for demonstration dir <- fs::file_temp() dir.create(dir) config_path <- file.path(dir, \"_envsetup.yml\")  # Write a basic config file file_conn <- file(config_path) writeLines( \"default:   paths:     data: '/demo/DEV/username/project1/data'     output: '/demo/DEV/username/project1/output'     programs: '/demo/DEV/username/project1/programs'\", file_conn) close(file_conn)"},{"path":"https://pharmaverse.github.io/envsetup/articles/basic_paths.html","id":"loading-and-using-the-configuration","dir":"Articles","previous_headings":"Understanding Path Configuration","what":"Loading and Using the Configuration","title":"Basic Path Configuration","text":"","code":"# Load the configuration envsetup_config <- config::get(file = config_path)  # Apply the configuration to your R session rprofile(envsetup_config) #> Assigned paths to __callr_data__Assigned paths to R_GlobalEnv"},{"path":"https://pharmaverse.github.io/envsetup/articles/basic_paths.html","id":"accessing-your-configured-paths","dir":"Articles","previous_headings":"Understanding Path Configuration","what":"Accessing Your Configured Paths","title":"Basic Path Configuration","text":"configured, paths available envsetup_environment environment within envsetup package environment:","code":"# See all available path objects ls(envsetup_environment) #> character(0)  # Access individual paths get_path(data) #> [1] \"/demo/DEV/username/project1/data\" get_path(output) #> [1] \"/demo/DEV/username/project1/output\" get_path(programs) #> [1] \"/demo/DEV/username/project1/programs\""},{"path":"https://pharmaverse.github.io/envsetup/articles/basic_paths.html","id":"how-it-works","dir":"Articles","previous_headings":"Understanding Path Configuration","what":"How It Works","title":"Basic Path Configuration","text":"rprofile() function: 1. Creates special environment called envsetup_environment 2. Populates configured path objects 3. Makes objects accessible code via get_path(), read_path(), write_path()","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/basic_paths.html","id":"benefits","dir":"Articles","previous_headings":"Understanding Path Configuration","what":"Benefits","title":"Basic Path Configuration","text":"setup: Consistency: team members use path structure Flexibility: Easy change paths without modifying code Clarity: Path purposes clearly defined Maintainability: Centralized configuration management","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/basic_paths.html","id":"next-steps","dir":"Articles","previous_headings":"Understanding Path Configuration","what":"Next Steps","title":"Basic Path Configuration","text":"Now understand basic path configuration, next guide show manage multiple environments (dev, qa, prod) different configurations.","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/dynamic_paths.html","id":"advanced-path-resolution","dir":"Articles","previous_headings":"","what":"Advanced Path Resolution","title":"Dynamic Path Management","text":"Sometimes data moves environments development, need check multiple locations files. guide shows set dynamic path resolution adapts workflow.","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/dynamic_paths.html","id":"the-problem-moving-data","dir":"Articles","previous_headings":"Advanced Path Resolution","what":"The Problem: Moving Data","title":"Dynamic Path Management","text":"Imagine scenario friend Tidy McVerse: starts programming data development: /demo/DEV/username/project1/data Halfway , data becomes production-ready moves : /demo/PROD/project1/data code work without changes, regardless data lives","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/dynamic_paths.html","id":"solution-multiple-path-locations","dir":"Articles","previous_headings":"Advanced Path Resolution","what":"Solution: Multiple Path Locations","title":"Dynamic Path Management","text":"Configure paths lists multiple possible locations:","code":"default:   paths:     data: !expr list(DEV = '/demo/DEV/username/project1/data', PROD = '/demo/PROD/project1/data')     output: '/demo/DEV/username/project1/output'     programs: '/demo/DEV/username/project1/programs'     envsetup_environ: !expr Sys.setenv(ENVSETUP_ENVIRON = 'DEV'); 'DEV'"},{"path":"https://pharmaverse.github.io/envsetup/articles/dynamic_paths.html","id":"working-example-setup","dir":"Articles","previous_headings":"Advanced Path Resolution","what":"Working Example Setup","title":"Dynamic Path Management","text":"","code":"library(envsetup)  # Create temporary directory structure dir <- fs::file_temp() dir.create(dir) config_path <- file.path(dir, \"_envsetup.yml\")  # Write configuration with multiple data paths file_conn <- file(config_path) writeLines(   paste0( \"default:   paths:     data: !expr list(DEV = '\", dir,\"/demo/DEV/username/project1/data', PROD = '\", dir, \"/demo/PROD/project1/data')     output: '\", dir, \"/demo/DEV/username/project1/output'     programs: '\", dir, \"/demo/DEV/username/project1/programs'     envsetup_environ: !expr Sys.setenv(ENVSETUP_ENVIRON = 'DEV'); 'DEV'\"  ), file_conn) close(file_conn)  # Load and apply configuration envsetup_config <- config::get(file = config_path) rprofile(envsetup_config) #> Assigned paths to __callr_data__Assigned paths to R_GlobalEnv"},{"path":"https://pharmaverse.github.io/envsetup/articles/dynamic_paths.html","id":"understanding-the-configuration","dir":"Articles","previous_headings":"Advanced Path Resolution","what":"Understanding the Configuration","title":"Dynamic Path Management","text":"Let’s examine now available:","code":"# See all configured objects ls(envsetup_environment) #> character(0)  # Data is now a named list with multiple locations get_path(data) #> $DEV #> [1] \"/tmp/Rtmp1tYD1R/file1f9f4e2ce19/demo/DEV/username/project1/data\" #>  #> $PROD #> [1] \"/tmp/Rtmp1tYD1R/file1f9f4e2ce19/demo/PROD/project1/data\" get_path(output) #> [1] \"/tmp/Rtmp1tYD1R/file1f9f4e2ce19/demo/DEV/username/project1/output\" get_path(programs) #> [1] \"/tmp/Rtmp1tYD1R/file1f9f4e2ce19/demo/DEV/username/project1/programs\" get_path(envsetup_environ) #> [1] \"DEV\""},{"path":"https://pharmaverse.github.io/envsetup/articles/dynamic_paths.html","id":"using-read_path-for-smart-file-location","dir":"Articles","previous_headings":"Advanced Path Resolution","what":"Using read_path() for Smart File Location","title":"Dynamic Path Management","text":"read_path() function searches path list find files:","code":"# Create the directory structure dir.create(file.path(dir, \"/demo/DEV/username/project1/data\"), recursive = TRUE) dir.create(file.path(dir, \"/demo/PROD/project1/data\"), recursive = TRUE)  # Add data only to PROD location saveRDS(mtcars, file.path(dir, \"/demo/PROD/project1/data/mtcars.RDS\"))  # read_path() finds the file in PROD read_path(data, \"mtcars.RDS\") #> Read Path:/tmp/Rtmp1tYD1R/file1f9f4e2ce19/demo/PROD/project1/data/mtcars.RDS #> [1] \"/tmp/Rtmp1tYD1R/file1f9f4e2ce19/demo/PROD/project1/data/mtcars.RDS\""},{"path":"https://pharmaverse.github.io/envsetup/articles/dynamic_paths.html","id":"path-search-order","dir":"Articles","previous_headings":"Advanced Path Resolution","what":"Path Search Order","title":"Dynamic Path Management","text":"data exists multiple locations, read_path() follows search order:","code":"# Add the same data to DEV location saveRDS(mtcars, file.path(dir, \"/demo/DEV/username/project1/data/mtcars.RDS\"))  # Now read_path() returns DEV location (first in search order) read_path(data, \"mtcars.RDS\") #> Read Path:/tmp/Rtmp1tYD1R/file1f9f4e2ce19/demo/DEV/username/project1/data/mtcars.RDS #> [1] \"/tmp/Rtmp1tYD1R/file1f9f4e2ce19/demo/DEV/username/project1/data/mtcars.RDS\""},{"path":"https://pharmaverse.github.io/envsetup/articles/dynamic_paths.html","id":"controlling-search-order-with-envsetup_environ","dir":"Articles","previous_headings":"Advanced Path Resolution","what":"Controlling Search Order with envsetup_environ","title":"Dynamic Path Management","text":"envsetup_environ variable controls paths searched: DEV: Searches DEV first, PROD PROD: Searches PROD (skips DEV)","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/dynamic_paths.html","id":"environment-specific-path-resolution","dir":"Articles","previous_headings":"Advanced Path Resolution","what":"Environment-Specific Path Resolution","title":"Dynamic Path Management","text":"Let’s add production configuration changes search behavior:","code":"# Update config to include prod environment file_conn <- file(config_path) writeLines(   paste0( \"default:   paths:     data: !expr list(DEV = '\",dir,\"/demo/DEV/username/project1/data', PROD = '\",dir,\"/demo/PROD/project1/data')     output: '\",dir,\"/demo/DEV/username/project1/output'     programs: '\",dir,\"/demo/DEV/username/project1/programs'     envsetup_environ: !expr Sys.setenv(ENVSETUP_ENVIRON = 'DEV'); 'DEV'  prod:   paths:     envsetup_environ: !expr Sys.setenv(ENVSETUP_ENVIRON = 'PROD'); 'PROD'\"   ), file_conn) close(file_conn)  # Load production configuration envsetup_config <- config::get(file = config_path, config = \"prod\") rprofile(envsetup_config) #> Assigned paths to __callr_data__Assigned paths to R_GlobalEnv  # Check the environment setting get_path(envsetup_environ) #> [1] \"PROD\""},{"path":"https://pharmaverse.github.io/envsetup/articles/dynamic_paths.html","id":"production-path-resolution","dir":"Articles","previous_headings":"Advanced Path Resolution","what":"Production Path Resolution","title":"Dynamic Path Management","text":"production configuration, path resolution behavior changes:","code":"# In production, read_path() returns PROD location even though DEV exists read_path(data, \"mtcars.RDS\") #> Read Path:/tmp/Rtmp1tYD1R/file1f9f4e2ce19/demo/PROD/project1/data/mtcars.RDS #> [1] \"/tmp/Rtmp1tYD1R/file1f9f4e2ce19/demo/PROD/project1/data/mtcars.RDS\""},{"path":"https://pharmaverse.github.io/envsetup/articles/dynamic_paths.html","id":"practical-usage-pattern","dir":"Articles","previous_headings":"Advanced Path Resolution","what":"Practical Usage Pattern","title":"Dynamic Path Management","text":"’s ’d typically use code:","code":"# Instead of hardcoding paths: # my_data <- readRDS(\"/some/hardcoded/path/mtcars.RDS\")  # Use dynamic path resolution: data_path <- read_path(data, \"mtcars.RDS\") my_data <- readRDS(data_path)  # This works regardless of environment or data location!"},{"path":"https://pharmaverse.github.io/envsetup/articles/dynamic_paths.html","id":"benefits-of-dynamic-paths","dir":"Articles","previous_headings":"Advanced Path Resolution","what":"Benefits of Dynamic Paths","title":"Dynamic Path Management","text":"Workflow Flexibility: Code works data moves environments Environment Awareness: Different search strategies per environment Fallback Logic: Automatic fallback alternative locations Code Stability: code changes needed paths change","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/envsetup/articles/dynamic_paths.html","id":"development-first-search","dir":"Articles","previous_headings":"Advanced Path Resolution > Common Patterns","what":"Development-First Search","title":"Dynamic Path Management","text":"","code":"data: !expr list(DEV = '/dev/path', PROD = '/prod/path') envsetup_environ: 'DEV'  # Searches all locations starting from DEV"},{"path":"https://pharmaverse.github.io/envsetup/articles/dynamic_paths.html","id":"production-only-search","dir":"Articles","previous_headings":"Advanced Path Resolution > Common Patterns","what":"Production-Only Search","title":"Dynamic Path Management","text":"","code":"data: !expr list(DEV = '/dev/path', PROD = '/prod/path') envsetup_environ: 'PROD'  # Searches only PROD location"},{"path":"https://pharmaverse.github.io/envsetup/articles/dynamic_paths.html","id":"next-steps","dir":"Articles","previous_headings":"Advanced Path Resolution","what":"Next Steps","title":"Dynamic Path Management","text":"next guide covers automatic script sourcing, lets automatically load custom functions multiple script libraries across environments.","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/multiple_environments.html","id":"multiple-environment-configuration","dir":"Articles","previous_headings":"","what":"Multiple Environment Configuration","title":"Managing Multiple Environments","text":"Real-world projects typically need different configurations development, quality assurance, production environments. guide shows set environment-specific configurations.","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/multiple_environments.html","id":"the-challenge","dir":"Articles","previous_headings":"Multiple Environment Configuration","what":"The Challenge","title":"Managing Multiple Environments","text":"Consider common workflow: Development: Developers work data produce outputs QA: Quality assurance independently confirms results developer Production: Verified data final outputs made available environment needs different paths, don’t want change code.","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/multiple_environments.html","id":"environment-specific-configuration","dir":"Articles","previous_headings":"Multiple Environment Configuration","what":"Environment-Specific Configuration","title":"Managing Multiple Environments","text":"’s set different configurations environment:","code":"default:   paths:     data: \"/demo/DEV/username/project1/data\"     output: \"/demo/DEV/username/project1/output\"     programs: \"/demo/DEV/username/project1/programs\"  qa:   paths:     data: \"/demo/QA/project1/data\"     output: \"/demo/QA/project1/output\"     programs: \"/demo/QA/project1/programs\"  prod:   paths:     data: \"/demo/PROD/project1/data\"     output: \"/demo/PROD/project1/output\"     programs: \"/demo/PROD/project1/programs\""},{"path":"https://pharmaverse.github.io/envsetup/articles/multiple_environments.html","id":"working-example","dir":"Articles","previous_headings":"Multiple Environment Configuration","what":"Working Example","title":"Managing Multiple Environments","text":"Let’s create multi-environment configuration:","code":"library(envsetup)  # Create temporary directory dir <- fs::file_temp() dir.create(dir) config_path <- file.path(dir, \"_envsetup.yml\")  # Write multi-environment config file_conn <- file(config_path) writeLines(   paste0( \"default:   paths:     data: '\", dir, \"/demo/DEV/username/project1/data'     output: '\", dir, \"/demo/DEV/username/project1/output'     programs: '\", dir, \"/demo/DEV/username/project1/programs'  qa:   paths:     data: '\", dir, \"/demo/QA/project1/data'     output: '\", dir, \"/demo/QA/project1/output'     programs: '\", dir, \"/demo/QA/project1/programs'  prod:   paths:     data: '\", dir, \"/demo/PROD/project1/data'     output: '\", dir, \"/demo/PROD/project1/output'     programs: '\", dir, \"/demo/PROD/project1/programs'\"   ), file_conn) close(file_conn)"},{"path":[]},{"path":"https://pharmaverse.github.io/envsetup/articles/multiple_environments.html","id":"default-environment","dir":"Articles","previous_headings":"Multiple Environment Configuration > Loading Different Environments","what":"Default Environment","title":"Managing Multiple Environments","text":"","code":"# Load default configuration (development) envsetup_config <- config::get(file = config_path) rprofile(envsetup_config) #> Assigned paths to __callr_data__Assigned paths to R_GlobalEnv  # Check the paths cat(\"Default environment paths:\\n\") #> Default environment paths: cat(\"Data:\", get_path(data), \"\\n\") #> Data: /tmp/RtmpeVwyJD/file1fd837a82254/demo/DEV/username/project1/data cat(\"Output:\", get_path(output), \"\\n\") #> Output: /tmp/RtmpeVwyJD/file1fd837a82254/demo/DEV/username/project1/output"},{"path":"https://pharmaverse.github.io/envsetup/articles/multiple_environments.html","id":"qa-environment","dir":"Articles","previous_headings":"Multiple Environment Configuration > Loading Different Environments","what":"QA Environment","title":"Managing Multiple Environments","text":"","code":"# Load QA configuration envsetup_config <- config::get(file = config_path, config = \"qa\") rprofile(envsetup_config) #> Assigned paths to __callr_data__Assigned paths to R_GlobalEnv  # Check the paths cat(\"QA environment paths:\\n\") #> QA environment paths: cat(\"Data:\", get_path(data), \"\\n\") #> Data: /tmp/RtmpeVwyJD/file1fd837a82254/demo/QA/project1/data cat(\"Output:\", get_path(output), \"\\n\") #> Output: /tmp/RtmpeVwyJD/file1fd837a82254/demo/QA/project1/output"},{"path":"https://pharmaverse.github.io/envsetup/articles/multiple_environments.html","id":"production-environment","dir":"Articles","previous_headings":"Multiple Environment Configuration > Loading Different Environments","what":"Production Environment","title":"Managing Multiple Environments","text":"","code":"# Load production configuration envsetup_config <- config::get(file = config_path, config = \"prod\") rprofile(envsetup_config) #> Assigned paths to __callr_data__Assigned paths to R_GlobalEnv  # Check the paths cat(\"Production environment paths:\\n\") #> Production environment paths: cat(\"Data:\", get_path(data), \"\\n\") #> Data: /tmp/RtmpeVwyJD/file1fd837a82254/demo/PROD/project1/data cat(\"Output:\", get_path(output), \"\\n\") #> Output: /tmp/RtmpeVwyJD/file1fd837a82254/demo/PROD/project1/output"},{"path":"https://pharmaverse.github.io/envsetup/articles/multiple_environments.html","id":"configuration-inheritance","dir":"Articles","previous_headings":"Multiple Environment Configuration","what":"Configuration Inheritance","title":"Managing Multiple Environments","text":"config package supports inheritance, meaning environments can inherit default override specific settings:","code":"default:   paths:     data: \"/demo/DEV/username/project1/data\"     output: \"/demo/DEV/username/project1/output\"     programs: \"/demo/DEV/username/project1/programs\"     log_level: \"DEBUG\"  prod:   paths:     data: \"/demo/PROD/project1/data\"     output: \"/demo/PROD/project1/output\"     log_level: \"ERROR\"     # programs inherits from default"},{"path":[]},{"path":"https://pharmaverse.github.io/envsetup/articles/multiple_environments.html","id":"environment-variable","dir":"Articles","previous_headings":"Multiple Environment Configuration > Environment Selection Strategies","what":"1. Environment Variable","title":"Managing Multiple Environments","text":"","code":"# Set environment variable Sys.setenv(R_CONFIG_ACTIVE = \"prod\") envsetup_config <- config::get(file = \"_envsetup.yml\")"},{"path":"https://pharmaverse.github.io/envsetup/articles/multiple_environments.html","id":"programmatic-selection","dir":"Articles","previous_headings":"Multiple Environment Configuration > Environment Selection Strategies","what":"2. Programmatic Selection","title":"Managing Multiple Environments","text":"","code":"# Choose environment in code environment <- \"prod\" envsetup_config <- config::get(file = \"_envsetup.yml\", config = environment)"},{"path":"https://pharmaverse.github.io/envsetup/articles/multiple_environments.html","id":"best-practices","dir":"Articles","previous_headings":"Multiple Environment Configuration","what":"Best Practices","title":"Managing Multiple Environments","text":"Use default development: development work happens Minimize environment differences: change ’s necessary Document environment purposes: Clear comments YAML Test environments: Ensure configurations work expected Version control: Keep _envsetup.yml repository","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/multiple_environments.html","id":"next-steps","dir":"Articles","previous_headings":"Multiple Environment Configuration","what":"Next Steps","title":"Managing Multiple Environments","text":"next guide covers advanced path management, including handle situations data might exist multiple locations need smart path resolution.","code":""},{"path":"https://pharmaverse.github.io/envsetup/articles/tips.html","id":"safely-set-autos","dir":"Articles","previous_headings":"","what":"1: Safely set autos","title":"Tips","text":"like account potential syntax errors sourcing autos, can wrap rprofile() purrr::safely(). function attempt set autos return list containing result error occurred. Let’s show example. First ’ll make example configuration file automatically source autos. ’ll intentionally add syntax error show safely() works. configuration file, automatically source autos DEV PROD directories: little work create directory, place script directory. ’ll add syntax error leaving closing } test_error.R script PROD folder. call rprofile() passing config file, get error syntax error test_error.R: handle error, can use purrr::safely() wrap rprofile() function. allow us catch error handle gracefully. still error, safely allow setup continue. can check result safely_rprofile() function see error, identify issue correct syntax error function.","code":"default:   autos:     projects: !expr list(       \"DEV\" = file.path(\"demo\", \"DEV\", \"username\", \"project1\", \"functions\"),       \"PROD\" = file.path(\"demo\", \"PROD\", \"project1\", \"functions\")       ) # create the temp directory dir <- fs::file_temp() dir.create(dir) dir.create(file.path(dir, \"/demo/PROD/project1/functions\"), recursive = TRUE)  # write a function to the folder with an error file_conn <- file(file.path(dir, \"/demo/PROD/project1/functions/test_error.R\")) writeLines( \"test <- function(){print('test')\", file_conn) close(file_conn)  # write the config config_path <- file.path(dir, \"_envsetup.yml\") file_conn <- file(config_path) writeLines(   paste0( \"default:   autos:     PROD: '\", dir,\"/demo/PROD/project1/functions'\"   ), file_conn) close(file_conn) library(envsetup)  envsetup_config <- config::get(file = config_path)  rprofile(envsetup_config) #> Assigned paths to __callr_data__Assigned paths to R_GlobalEnv #> Sourcing file:  '/tmp/RtmpxJ6JUk/file201027d14047/demo/PROD/project1/functions/test_error.R' #> Error in `map2()`: #> ℹ In index: 1. #> ℹ With name: PROD. #> Caused by error in `map()`: #> ℹ In index: 1. #> Caused by error in `parse()`: #> ! 2:0: unexpected end of input #> 1: test <- function(){print('test') #>    ^ safely_rprofile <- purrr::safely(rprofile)  ret <- safely_rprofile(envsetup_config) #> Assigned paths to __callr_data__Assigned paths to R_GlobalEnv #> Sourcing file:  '/tmp/RtmpxJ6JUk/file201027d14047/demo/PROD/project1/functions/test_error.R' # check for errors and return if any occurred if(!is.null(ret$error)) {   print(ret$error) } #> <error/purrr_error_indexed> #> Error in `map2()`: #> ℹ In index: 1. #> ℹ With name: PROD. #> Caused by error in `map()`: #> ℹ In index: 1. #> Caused by error in `parse()`: #> ! 2:0: unexpected end of input #> 1: test <- function(){print('test') #>    ^ #> --- #> Backtrace: #>      ▆ #>   1. └─purrr (local) safely_rprofile(envsetup_config) #>   2.   ├─purrr:::capture_error(.f(...), otherwise, quiet) #>   3.   │ └─base::tryCatch(...) #>   4.   │   └─base (local) tryCatchList(expr, classes, parentenv, handlers) #>   5.   │     └─base (local) tryCatchOne(expr, names, parentenv, handlers[[1L]]) #>   6.   │       └─base (local) doTryCatch(return(expr), name, parentenv, handler) #>   7.   └─envsetup (local) .f(...) #>   8.     └─envsetup:::set_autos(config$autos, overwrite = overwrite) #>   9.       └─purrr::walk2(...) #>  10.         └─purrr::map2(.x, .y, .f, ..., .progress = .progress) #>  11.           └─purrr:::map2_(\"list\", .x, .y, .f, ..., .progress = .progress) #>  12.             ├─purrr:::with_indexed_errors(...) #>  13.             │ └─base::withCallingHandlers(...) #>  14.             ├─purrr:::call_with_cleanup(...) #>  15.             └─envsetup (local) .f(.x[[i]], .y[[i]], ...) #>  16.               └─envsetup:::attach_auto(.x, .y, overwrite = overwrite) #>  17.                 └─purrr::walk(collated_r_scripts, source_warn_conflicts, overwrite = overwrite) #>  18.                   └─purrr::map(.x, .f, ..., .progress = .progress) #>  19.                     └─purrr:::map_(\"list\", .x, .f, ..., .progress = .progress) #>  20.                       ├─purrr:::with_indexed_errors(...) #>  21.                       │ └─base::withCallingHandlers(...) #>  22.                       ├─purrr:::call_with_cleanup(...) #>  23.                       └─envsetup (local) .f(.x[[i]], ...) #>  24.                         └─base::sys.source(file, envir = new_env) #>  25.                           └─base::parse(n = -1, file = file, srcfile = NULL, keep.source = FALSE)"},{"path":"https://pharmaverse.github.io/envsetup/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicholas Masel. Author, maintainer. Mike Stackhouse. Author. Aidan Ceney. Author. Johnson & Johnson Innovative Medicine. Copyright holder, funder. Atorus Research, Inc.. Copyright holder.","code":""},{"path":"https://pharmaverse.github.io/envsetup/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Masel N, Stackhouse M, Ceney (2025). envsetup: Support Setup R Environment Clinical Trial Programming Workflows. R package version 0.3.0, https://github.com/pharmaverse/envsetup.","code":"@Manual{,   title = {envsetup: Support the Setup of the R Environment for Clinical Trial Programming Workflows},   author = {Nicholas Masel and Mike Stackhouse and Aidan Ceney},   year = {2025},   note = {R package version 0.3.0},   url = {https://github.com/pharmaverse/envsetup}, }"},{"path":[]},{"path":"https://pharmaverse.github.io/envsetup/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Support the Setup of the R Environment for Clinical Trial Programming Workflows","text":"envsetup package helps manage R project environments providing flexible configuration system adapts different deployment stages (development, testing, production) without requiring code changes.","code":""},{"path":"https://pharmaverse.github.io/envsetup/index.html","id":"why-use-envsetup","dir":"","previous_headings":"","what":"Why Use envsetup?","title":"Support the Setup of the R Environment for Clinical Trial Programming Workflows","text":"working R projects, often need : Point different data sources across environments Use different output directories Load environment-specific functions Maintain consistent code across environments like dev, qa, prod Instead hardcoding paths manually changing configurations, envsetup uses YAML configuration files manage differences automatically.","code":""},{"path":"https://pharmaverse.github.io/envsetup/index.html","id":"basic-concepts","dir":"","previous_headings":"","what":"Basic Concepts","title":"Support the Setup of the R Environment for Clinical Trial Programming Workflows","text":"envsetup package works two main components: PATHS: Manages file system locations (data, output, programs) AUTOS: Automatically sources R scripts specified directories","code":""},{"path":"https://pharmaverse.github.io/envsetup/index.html","id":"your-first-configuration","dir":"","previous_headings":"","what":"Your First Configuration","title":"Support the Setup of the R Environment for Clinical Trial Programming Workflows","text":"’s simplest possible _envsetup.yml configuration:","code":"default:   paths:     data: \"/path/to/your/data\"     output: \"/path/to/your/output\""},{"path":"https://pharmaverse.github.io/envsetup/index.html","id":"quick-start-example","dir":"","previous_headings":"","what":"Quick Start Example","title":"Support the Setup of the R Environment for Clinical Trial Programming Workflows","text":"","code":"library(envsetup)  # Load your configuration envsetup_config <- config::get(file = \"_envsetup.yml\")  # Apply the configuration rprofile(envsetup_config)  # Now you can use the configured paths print(data)    # Points to your data directory print(output)  # Points to your output directory"},{"path":"https://pharmaverse.github.io/envsetup/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Support the Setup of the R Environment for Clinical Trial Programming Workflows","text":"","code":"install.packages(\"envsetup\")"},{"path":"https://pharmaverse.github.io/envsetup/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Support the Setup of the R Environment for Clinical Trial Programming Workflows","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"pharmaverse/envsetup\")"},{"path":"https://pharmaverse.github.io/envsetup/index.html","id":"whats-next","dir":"","previous_headings":"","what":"What’s Next?","title":"Support the Setup of the R Environment for Clinical Trial Programming Workflows","text":"following guides, ’ll learn: set basic path configurations Managing multiple environments Advanced path resolution Automatic script sourcing Real-world examples best practices Let’s start basic path configuration next section.","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/build_from_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Build directory structure from a configuration file — build_from_config","title":"Build directory structure from a configuration file — build_from_config","text":"Build directory structure configuration file","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/build_from_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build directory structure from a configuration file — build_from_config","text":"","code":"build_from_config(config, root = NULL)"},{"path":"https://pharmaverse.github.io/envsetup/reference/build_from_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build directory structure from a configuration file — build_from_config","text":"config configuration object config::get() containing paths root root directory build . Leave NULL using absolute paths.  Set working directory using relative paths.","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/build_from_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build directory structure from a configuration file — build_from_config","text":"Called side-effects. directories build print tree-like format fs::dir_tree().","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/build_from_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build directory structure from a configuration file — build_from_config","text":"","code":"tmpdir <- tempdir()  hierarchy <- \"default:   paths:     data: !expr list(DEV = '/demo/DEV/username/project1/data',                      PROD = '/demo/PROD/project1/data')     output: !expr list(DEV = '/demo/DEV/username/project1/output',                        PROD = '/demo/PROD/project1/output')     programs: !expr list(DEV = '/demo/DEV/username/project1/programs',                          PROD = '/demo/PROD/project1/programs')     docs: !expr list(DEV = 'docs',                      PROD = 'docs')\"  writeLines(hierarchy, file.path(tmpdir, \"hierarchy.yml\"))  config <- config::get(file = file.path(tmpdir, \"hierarchy.yml\"))  build_from_config(config, tmpdir) #> ✔ Directories built #> /tmp/RtmpwAxBQ7 #> ├── bslib-2ce9eb5d8d7866b4f2d82a9ef19eb08f #> ├── demo #> │   ├── DEV #> │   │   └── username #> │   │       └── project1 #> │   │           ├── data #> │   │           ├── output #> │   │           └── programs #> │   └── PROD #> │       └── project1 #> │           ├── data #> │           ├── output #> │           └── programs #> ├── docs #> └── downlit"},{"path":"https://pharmaverse.github.io/envsetup/reference/detach_autos.html","id":null,"dir":"Reference","previous_headings":"","what":"Detach the autos from the current session — detach_autos","title":"Detach the autos from the current session — detach_autos","text":"function remove autos set search path","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/detach_autos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detach the autos from the current session — detach_autos","text":"","code":"detach_autos()"},{"path":"https://pharmaverse.github.io/envsetup/reference/detach_autos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detach the autos from the current session — detach_autos","text":"Called side-effects.","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/detach_autos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detach the autos from the current session — detach_autos","text":"","code":"tmpdir <- tempdir() print(tmpdir) #> [1] \"/tmp/RtmpwAxBQ7\"  # account for windows if (Sys.info()['sysname'] == \"Windows\") {   tmpdir <- gsub(\"\\\\\", \"\\\\\\\\\", tmpdir, fixed = TRUE) }  # Create an example config file\\ hierarchy <- paste0(\"default:   paths:     functions: !expr list(DEV = file.path('\",tmpdir,\"',                                           'demo',                                           'DEV',                                           'username',                                           'project1',                                           'functions'),                           PROD = file.path('\",tmpdir,\"',                                            'demo',                                            'PROD',                                            'project1',                                            'functions'))   autos:      my_functions: !expr list(DEV = file.path('\",tmpdir,\"',                                               'demo',                                               'DEV',                                               'username',                                               'project1',                                               'functions'),                               PROD = file.path('\",tmpdir,\"',                                                'demo',                                                'PROD',                                                'project1',                                                'functions'))\")  # write config writeLines(hierarchy, file.path(tmpdir, \"hierarchy.yml\"))  config <- config::get(file = file.path(tmpdir, \"hierarchy.yml\"))  build_from_config(config) #> ✔ Directories built #> /tmp/RtmpwAxBQ7/demo/ #> ├── DEV #> │   └── username #> │       └── project1 #> │           ├── data #> │           ├── functions #> │           ├── output #> │           └── programs #> └── PROD #>     └── project1 #>         ├── data #>         ├── functions #>         ├── output #>         └── programs  # write function to DEV writeLines(\"dev_function <- function() {print(environment(dev_function))}\",            file.path(tmpdir, 'demo', 'DEV', 'username', 'project1', 'functions', 'dev_function.r'))  # write function to PROD writeLines(\"prod_function <- function() {print(environment(prod_function))}\",            file.path(tmpdir, 'demo', 'PROD', 'project1', 'functions', 'prod_function.r'))  # setup the environment Sys.setenv(ENVSETUP_ENVIRON = \"DEV\") rprofile(config::get(file = file.path(tmpdir, \"hierarchy.yml\"))) #> Assigned paths to R_GlobalEnv #> Sourcing file:  '/tmp/RtmpwAxBQ7/demo/DEV/username/project1/functions/dev_function.r'  #>  #>  The following objects are added to .GlobalEnv: #>  #>     'dev_function' #>  #> Sourcing file:  '/tmp/RtmpwAxBQ7/demo/PROD/project1/functions/prod_function.r'  #>  #>  The following objects are added to .GlobalEnv: #>  #>     'prod_function' #>   # show dev_function() and prod_function() are available and print their location dev_function() #> <environment: 0x55bd56285b90> prod_function() #> <environment: 0x55bd562ff798>  # remove autos from search detach_autos()"},{"path":"https://pharmaverse.github.io/envsetup/reference/envsetup_environment.html","id":null,"dir":"Reference","previous_headings":"","what":"Environment Setup Environment — envsetup_environment","title":"Environment Setup Environment — envsetup_environment","text":"dedicated environment object used store manage path configurations setup variables envsetup package. environment provides isolated namespace storing path objects can retrieved using package's path management functions.","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/envsetup_environment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Environment Setup Environment — envsetup_environment","text":"","code":"envsetup_environment"},{"path":"https://pharmaverse.github.io/envsetup/reference/envsetup_environment.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Environment Setup Environment — envsetup_environment","text":"object class environment length 0.","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/envsetup_environment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Environment Setup Environment — envsetup_environment","text":"environment object created new.env().","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/envsetup_environment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Environment Setup Environment — envsetup_environment","text":"environment serves default storage location path objects using envsetup package functions. helps maintain clean separation user workspace package-managed paths.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/envsetup/reference/envsetup_environment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Environment Setup Environment — envsetup_environment","text":"","code":"# Store a path in the envsetup environment assign(\"project_root\", \"/path/to/project\", envir = envsetup_environment)  # List objects in the environment ls(envir = envsetup_environment) #> [1] \"project_root\"  # Check if the environment exists and is an environment exists(\"envsetup_environment\") #> [1] TRUE is.environment(envsetup_environment) #> [1] TRUE"},{"path":"https://pharmaverse.github.io/envsetup/reference/get_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Path Object from Environment — get_path","title":"Get Path Object from Environment — get_path","text":"Retrieves path object specified environment using non-standard evaluation. function uses substitute() capture unevaluated expression get() retrieve corresponding object.","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/get_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Path Object from Environment — get_path","text":"","code":"get_path(path, envir = getOption(\"envsetup.path.environment\"))"},{"path":"https://pharmaverse.github.io/envsetup/reference/get_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Path Object from Environment — get_path","text":"path unquoted name path object retrieve environment. envir environment search path object. Defaults value getOption(\"envsetup.path.environment\").","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/get_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Path Object from Environment — get_path","text":"path object stored specified environment given name.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/envsetup/reference/get_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Path Object from Environment — get_path","text":"","code":"# Create a custom environment and store some paths path_env <- new.env() assign(\"data_dir\", \"/home/user/data\", envir = path_env) assign(\"output_dir\", \"/home/user/output\", envir = path_env)  # Set up the option to use our custom environment options(envsetup.path.environment = path_env)  # Retrieve paths using the function data_path <- get_path(data_dir) output_path <- get_path(output_dir)  print(data_path)    # \"/home/user/data\" #> [1] \"/home/user/data\" print(output_path)  # \"/home/user/output\" #> [1] \"/home/user/output\"  # Using with a different environment temp_env <- new.env() assign(\"temp_dir\", \"/tmp/analysis\", envir = temp_env) temp_path <- get_path(temp_dir, envir = temp_env) print(temp_path)    # \"/tmp/analysis\" #> [1] \"/tmp/analysis\""},{"path":"https://pharmaverse.github.io/envsetup/reference/init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the R environment with envsetup — init","title":"Initialize the R environment with envsetup — init","text":"Initialize R environment envsetup","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the R environment with envsetup — init","text":"","code":"init(project, config_path = NULL, create_paths = NULL)"},{"path":"https://pharmaverse.github.io/envsetup/reference/init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the R environment with envsetup — init","text":"project Character. path project directory. config_path Character. path config file. Defaults NULL. create_paths Logical indicating missing paths created. Defaults NULL.","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize the R environment with envsetup — init","text":"Called side-effects.","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize the R environment with envsetup — init","text":"","code":"tmpdir <- tempdir() print(tmpdir) #> [1] \"/tmp/RtmpwAxBQ7\"  # account for windows if (Sys.info()['sysname'] == \"Windows\") {   tmpdir <- gsub(\"\\\\\", \"\\\\\\\\\", tmpdir, fixed = TRUE) }  # Create an example config file\\ hierarchy <- paste0(\"default:   paths:     data: !expr list(       DEV = file.path('\",tmpdir,\"', 'demo', 'DEV', 'username', 'project1', 'data'),       PROD = file.path('\",tmpdir,\"', 'demo', 'PROD', 'project1', 'data'))     output: !expr list(       DEV = file.path('\",tmpdir,\"', 'demo', 'DEV', 'username', 'project1', 'output'),       PROD = file.path('\",tmpdir,\"', 'demo', 'PROD', 'project1', 'output'))     programs: !expr list(       DEV = file.path('\",tmpdir,\"', 'demo', 'DEV', 'username', 'project1', 'programs'),       PROD = file.path('\",tmpdir,\"', 'demo', 'PROD', 'project1', 'programs'))\")   writeLines(hierarchy, file.path(tmpdir, \"hierarchy.yml\"))  init(project = tmpdir,      config_path = file.path(tmpdir, \"hierarchy.yml\"),      create_paths = TRUE) #> ✔ Configuration file found! #> ✔ .Rprofile created #> ✔ Directories built #> /tmp/RtmpwAxBQ7/demo/ #> ├── DEV #> │   └── username #> │       └── project1 #> │           ├── data #> │           ├── functions #> │           ├── output #> │           └── programs #> └── PROD #>     └── project1 #>         ├── data #>         ├── functions #>         ├── output #>         └── programs #> ✔ envsetup initialization complete"},{"path":"https://pharmaverse.github.io/envsetup/reference/read_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Read path — read_path","title":"Read path — read_path","text":"Check environment file return path first.","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/read_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read path — read_path","text":"","code":"read_path(   lib,   filename,   full.path = TRUE,   envsetup_environ = Sys.getenv(\"ENVSETUP_ENVIRON\"),   envir = getOption(\"envsetup.path.environment\") )"},{"path":"https://pharmaverse.github.io/envsetup/reference/read_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read path — read_path","text":"lib object containing paths environments directory filename name file like read full.path logical return path including file name envsetup_environ name environment like read file ; default values comes value system variable ENVSETUP_ENVIRON can set Sys.setenv(ENVSETUP_ENVIRON = \"environment name\") envir environment search path object. Defaults value getOption(\"envsetup.path.environment\").","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/read_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read path — read_path","text":"string containing path first directory file found","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/read_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read path — read_path","text":"environments searched depends current environment. example, workflow contains development (dev) area production area (prod), code executing dev environment, search dev prod. prod, search prod.","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/read_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read path — read_path","text":"","code":"tmpdir <- tempdir()  # account for windows if (Sys.info()['sysname'] == \"Windows\") {   tmpdir <- gsub(\"\\\\\", \"\\\\\\\\\", tmpdir, fixed = TRUE) }  # add config for just the data location hierarchy <- paste0(\"default:   paths:     data: !expr list(       DEV = file.path('\",tmpdir,\"', 'demo', 'DEV', 'username', 'project1', 'data'),       PROD = file.path('\",tmpdir,\"', 'demo', 'PROD', 'project1', 'data'))\")  # write config file to temp directory writeLines(hierarchy, file.path(tmpdir, \"hierarchy.yml\"))  config <- config::get(file = file.path(tmpdir, \"hierarchy.yml\"))  # build folder structure from config build_from_config(config) #> ✔ Directories built #> /tmp/RtmpwAxBQ7/demo/ #> ├── DEV #> │   └── username #> │       └── project1 #> │           ├── data #> │           ├── functions #> │           ├── output #> │           └── programs #> └── PROD #>     └── project1 #>         ├── data #>         ├── functions #>         ├── output #>         └── programs  # setup environment based on config rprofile(config::get(file = file.path(tmpdir, \"hierarchy.yml\"))) #> Assigned paths to   # place data in prod data folder saveRDS(mtcars, file.path(tmpdir, \"demo/PROD/project1/data/mtcars.rds\"))  # find the location of mtcars.rds read_path(data, \"mtcars.rds\") #> Read Path:/tmp/RtmpwAxBQ7/demo/PROD/project1/data/mtcars.rds #> [1] \"/tmp/RtmpwAxBQ7/demo/PROD/project1/data/mtcars.rds\""},{"path":"https://pharmaverse.github.io/envsetup/reference/rprofile.html","id":null,"dir":"Reference","previous_headings":"","what":"Function used to pass through code to the .Rprofile — rprofile","title":"Function used to pass through code to the .Rprofile — rprofile","text":"Function used pass code .Rprofile","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/rprofile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function used to pass through code to the .Rprofile — rprofile","text":"","code":"rprofile(   config,   envir = getOption(\"envsetup.path.environment\"),   overwrite = TRUE )"},{"path":"https://pharmaverse.github.io/envsetup/reference/rprofile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function used to pass through code to the .Rprofile — rprofile","text":"config configuration object config::get() envir environment search path object. Defaults value getOption(\"envsetup.path.environment\"). overwrite logical indicating sourcing autos overwrite object global already exists","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/rprofile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function used to pass through code to the .Rprofile — rprofile","text":"Called side effects.  Directory paths autos added search path based config.","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/rprofile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function used to pass through code to the .Rprofile — rprofile","text":"","code":"# temp location to store configuration files tmpdir <- tempdir() print(tmpdir) #> [1] \"/tmp/RtmpwAxBQ7\"  # Create an example config file hierarchy <- \"default:   paths:     data: !expr list(DEV = '/demo/DEV/username/project1/data',                      PROD = '/demo/PROD/project1/data')     output: !expr list(DEV = '/demo/DEV/username/project1/output',                        PROD = '/demo/PROD/project1/output')     programs: !expr list(DEV = '/demo/DEV/username/project1/programs',                          PROD = '/demo/PROD/project1/programs')\"  writeLines(hierarchy, file.path(tmpdir, \"hierarchy.yml\"))  rprofile(config::get(file = file.path(tmpdir, \"hierarchy.yml\"))) #> Assigned paths to"},{"path":"https://pharmaverse.github.io/envsetup/reference/validate_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a configuration file — validate_config","title":"Validate a configuration file — validate_config","text":"helper function help troubleshoot common problems can occur building configuration file.","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/validate_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a configuration file — validate_config","text":"","code":"validate_config(config)"},{"path":"https://pharmaverse.github.io/envsetup/reference/validate_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a configuration file — validate_config","text":"config configuration object config::get()","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/validate_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a configuration file — validate_config","text":"Called side-effects. Prints findings validation checks.","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/validate_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a configuration file — validate_config","text":"","code":"# temp location to store configuration files tmpdir <- tempdir() print(tmpdir) #> [1] \"/tmp/RtmpwAxBQ7\"  # Each path only points to one location, i.e. there is no hierarchy for a path no_hierarchy <- 'default:   paths:     data: \"/demo/DEV/username/project1/data\"     output: \"/demo/DEV/username/project1/output\"     programs: \"/demo/DEV/username/project1/programs\"'  writeLines(no_hierarchy, file.path(tmpdir, \"no_hierarchy.yml\"))  validate_config(config::get(file = file.path(tmpdir, \"no_hierarchy.yml\"))) #> ✔ paths are specified as part of your configuration #> ℹ no hierarchical paths found  # A path can point to multiple locations, i.e. there is a hierarchy hierarchy <- \"default:   paths:     data: !expr list(DEV = '/demo/DEV/username/project1/data',                      PROD = '/demo/PROD/project1/data')     output: !expr list(DEV = '/demo/DEV/username/project1/output',                        PROD = '/demo/PROD/project1/output')     programs: !expr list(DEV = '/demo/DEV/username/project1/programs',                          PROD = '/demo/PROD/project1/programs')     envsetup_environ: !expr Sys.setenv(ENVSETUP_ENVIRON = 'DEV'); 'DEV'\"  writeLines(hierarchy, file.path(tmpdir, \"hierarchy.yml\"))  validate_config(config::get(file = file.path(tmpdir, \"hierarchy.yml\"))) #> ✔ paths are specified as part of your configuration #> ✔ hierarchal paths found for: #>   data #>   output #>   programs  # A hierarchy is present for paths, but they are not named hierarchy_no_names <- \"default:   paths:     data: !expr list('/demo/DEV/username/project1/data', '/demo/PROD/project1/data')     output: !expr list('/demo/DEV/username/project1/output', '/demo/PROD/project1/output')     programs: !expr list('/demo/DEV/username/project1/programs', '/demo/PROD/project1/programs')     envsetup_environ: !expr Sys.setenv(ENVSETUP_ENVIRON = 'DEV'); 'DEV'\"   writeLines(hierarchy_no_names, file.path(tmpdir, \"hierarchy_no_names.yml\"))  validate_config(config::get(file = file.path(tmpdir, \"hierarchy_no_names.yml\"))) #> ✔ paths are specified as part of your configuration #> ✔ hierarchal paths found for: #>   data #>   output #>   programs #> • data has a hierarchy but they are not named.  Please update your configuration to name the hierarchy for data. #> • output has a hierarchy but they are not named.  Please update your configuration to name the hierarchy for output. #> • programs has a hierarchy but they are not named.  Please update your configuration to name the hierarchy for programs.   # No paths are specified no_paths <- \"default:   autos:     my_functions: '/demo/PROD/project1/R'\"  writeLines(no_paths, file.path(tmpdir, \"no_paths.yml\"))  validate_config(config::get(file = file.path(tmpdir, \"no_paths.yml\"))) #> ℹ no paths are specified as part of your configuration, skipping path valiation"},{"path":"https://pharmaverse.github.io/envsetup/reference/write_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a file path from an envsetup object containing paths — write_path","title":"Retrieve a file path from an envsetup object containing paths — write_path","text":"Paths filtered produce lowest available level hierarchy paths based envsetup_environ","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/write_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a file path from an envsetup object containing paths — write_path","text":"","code":"write_path(   lib,   filename = NULL,   envsetup_environ = Sys.getenv(\"ENVSETUP_ENVIRON\"),   envir = getOption(\"envsetup.path.environment\") )"},{"path":"https://pharmaverse.github.io/envsetup/reference/write_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a file path from an envsetup object containing paths — write_path","text":"lib Object containing paths environments directory filename Name file like write envsetup_environ Name environment like write. Defaults ENVSETUP_ENVIRON environment variable envir environment search path object. Defaults value getOption(\"envsetup.path.environment\").","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/write_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a file path from an envsetup object containing paths — write_path","text":"path write","code":""},{"path":"https://pharmaverse.github.io/envsetup/reference/write_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a file path from an envsetup object containing paths — write_path","text":"","code":"tmpdir <- tempdir()  # account for windows if (Sys.info()['sysname'] == \"Windows\") {   tmpdir <- gsub(\"\\\\\", \"\\\\\\\\\", tmpdir, fixed = TRUE) }  # add config for just the data location hierarchy <- paste0(\"default:   paths:     data: !expr list(       DEV = file.path('\",tmpdir,\"', 'demo', 'DEV', 'username', 'project1', 'data'),       PROD = file.path('\",tmpdir,\"', 'demo', 'PROD', 'project1', 'data'))\")  # write config file to temp directory writeLines(hierarchy, file.path(tmpdir, \"hierarchy.yml\"))  config <- config::get(file = file.path(tmpdir, \"hierarchy.yml\"))  # build folder structure from config build_from_config(config) #> ✔ Directories built #> /tmp/RtmpwAxBQ7/demo/ #> ├── DEV #> │   └── username #> │       └── project1 #> │           ├── data #> │           ├── functions #> │           ├── output #> │           └── programs #> └── PROD #>     └── project1 #>         ├── data #>         ├── functions #>         ├── output #>         └── programs  # setup environment based on config rprofile(config::get(file = file.path(tmpdir, \"hierarchy.yml\"))) #> Assigned paths to   # find location to write mtcars.rds write_path(data, \"mtcars.rds\") #> Write Path:/tmp/RtmpwAxBQ7/demo/DEV/username/project1/data/mtcars.rds #> [1] \"/tmp/RtmpwAxBQ7/demo/DEV/username/project1/data/mtcars.rds\"  # save data in data folder using write_path saveRDS(mtcars, write_path(data, \"mtcars.rds\")) #> Write Path:/tmp/RtmpwAxBQ7/demo/DEV/username/project1/data/mtcars.rds"},{"path":"https://pharmaverse.github.io/envsetup/news/index.html","id":"envsetup-030","dir":"Changelog","previous_headings":"","what":"envsetup 0.3.0","title":"envsetup 0.3.0","text":"paths longer attached search path (#80) paths objects default global environment now, can changed using envsetup.path.environment option (#80) get_path() added help retrieve path changing storage environment using envsetup.path.environment option (#80) autos longer attached search path, sourced global (#81) rprofile lets specify sourcing autos overwrite object global already exists (#81) extensive messaging added make users aware autos attached conflicts (#81) object metadata storage added track functions sourced , see envsetup_environment$object_metadata (#81) vignettes updated divide content smaller chunks (#82)","code":""},{"path":"https://pharmaverse.github.io/envsetup/news/index.html","id":"envsetup-021","dir":"Changelog","previous_headings":"","what":"envsetup 0.2.1","title":"envsetup 0.2.1","text":"set_autos() now handle NULL hierarchical paths (#66) set_autos() account using @include define function dependencies (#70)","code":""},{"path":"https://pharmaverse.github.io/envsetup/news/index.html","id":"envsetup-020","dir":"Changelog","previous_headings":"","what":"envsetup 0.2.0","title":"envsetup 0.2.0","text":"library() longer actively reset autos, instead placing newly attached packages correct position respects existing autos (#59)","code":""},{"path":"https://pharmaverse.github.io/envsetup/news/index.html","id":"envsetup-010","dir":"Changelog","previous_headings":"","what":"envsetup 0.1.0","title":"envsetup 0.1.0","text":"Minor updates prepare initial CRAN release (#55)","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/envsetup/news/index.html","id":"new-features-0-0-1","dir":"Changelog","previous_headings":"","what":"New Features","title":"envsetup 0.0.1","text":"init() added assist setting project use envsetup (#20, #21, #31) build_from_config() added add ability also use config create directories (#25) validate_config() added assist creating configuration files (#23) rprofile() automatically store configuration file standard location standard name, allowing library() use re-assign autos","code":""},{"path":"https://pharmaverse.github.io/envsetup/news/index.html","id":"breaking-changes-0-0-1","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"envsetup 0.0.1","text":"library() now respect invisible return instead always returning list attached packages (#24) set_autos() now expects different YAML structure hierarchical filtering based ENVSETUP_ENVIRON (#28)","code":""},{"path":"https://pharmaverse.github.io/envsetup/news/index.html","id":"bug-fixes-0-0-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"envsetup 0.0.1","text":"read_path() write_path() work correctly now even path objects exists environments (#36)","code":""}]
