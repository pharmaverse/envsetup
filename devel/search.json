[{"path":"https://pharmaverse.github.io/envsetup/devel/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/envsetup/devel/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://pharmaverse.github.io/envsetup/devel/articles/config.html","id":"paths","dir":"Articles","previous_headings":"","what":"PATHS","title":"Create Your Config","text":"adds envsetup:paths search path contains relevant objects needed point different directories environment.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/articles/config.html","id":"level-1-of-config-the-execution-environment-ex--dev-qa-or-prod","dir":"Articles","previous_headings":"PATHS","what":"Level 1 of config: the execution environment (ex. dev, qa or prod)","title":"Create Your Config","text":"Scripts typically execute different environments depending workflow. workflow multiple developers work dev making scripts, move qa quality checks sign , move prod executed delivery.","code":"default:  dev:  qa:  prod:"},{"path":"https://pharmaverse.github.io/envsetup/devel/articles/config.html","id":"level-2-of-config-paths-and-autos","dir":"Articles","previous_headings":"PATHS","what":"Level 2 of config: paths and autos","title":"Create Your Config","text":"execution environment might slightly different configurations. allows us change configuration meet needs environment.","code":"default:   paths:   autos:  dev:   paths:   autos:  qa:   paths:   autos:  prod:   paths:   autos:"},{"path":"https://pharmaverse.github.io/envsetup/devel/articles/config.html","id":"level-3-of-config-configure-the-environment","dir":"Articles","previous_headings":"PATHS","what":"Level 3 of config: configure the environment","title":"Create Your Config","text":"best illustrated example. example, focus setting one environment, default configuration. wish different configurations based environment, need expand fit needs.","code":"default:   paths:   autos:"},{"path":"https://pharmaverse.github.io/envsetup/devel/articles/config.html","id":"a-working-example","dir":"Articles","previous_headings":"PATHS","what":"A working example","title":"Create Your Config","text":"First need read data, write results save script future reference project ’ll call project1. need object point locations, add data, output programs objects config. working example even better, let’s create temporary directory store config file _envsetup.yml. can call rprofile(), passing configuration. now data, output programs available us search path within envsetup:paths. Let’s take look: Alright! Now let’s go one step imagine programmer, ’ll call Tidy McVerse. Miss McVerse needs read data data development area started programming. great! already object data points “/demo/DEV/username/project1/data”. Half way programming, data considered production ready data moved “/demo/DEV/username/project1/data” “/demo/PROD/project1/data”. Miss McVerse need change programs now, needs way read data smarter average bear. object uses read data work data “/demo/DEV/username/project1/data” “/demo/PROD/project1/data”. Let’s create config keep Tidy McVerse happy focused results, data locations. configuration execute R code build list possible data sources, see config package details. , working example like code along. overwrite previous config file new config. Now can re-setup project. data, output programs available us search path within envsetup:paths, data now named list two locations. also now envsetup_environ , get details later, just accept exists now. can use envsetup::read_path() help us find data like read. Let’s create directories temporary folder structure … … add mtcars PROD data directory, “/demo/PROD/project1/data”. Now can use read_path(), passing path object data find read mtcars.RDS. data PROD function returns path PROD mtcars.RDS. Let’s keep going! data DEV PROD? Let’s save data DEV … … see read_path() returns. see path DEV now instead path PROD. explain , now talk envsetup_environ, set config earlier. multiple paths, data, controls paths checked. just index. Wherever environment found list, location end checked data. example , set envsetup_environ = 'DEV'. DEV first data list, meaning locations checked object found nothing found. Let’s now add execution environment PROD. simply change envsetup_environ DEV PROD, DEV wouldn’t work. need add configuration PROD, otherwise use default. write new config … … use overwrite project new configuration. Let’s check envsetup_environ now PROD. ! isn’t PROD. must pass configuration config:get() telling use PROD. Now lets see changed call read_path() mtcars.RDS using PROD configuration. see path PROD, even though data exists DEV PROD. data indexed starting location PROD, last element data, location checked, excluding DEV. Miss McVerse longer needs think data workflow, can use read_path(data, ...) determine correct path. can apply steps update configuration output programs account PROD well.","code":"default:   paths:     data: \"/demo/DEV/username/project1/data\"     output: \"/demo/DEV/username/project1/output\"     programs: \"/demo/DEV/username/project1/programs\" library(envsetup) #>  #> Attaching package: 'envsetup' #> The following object is masked from 'package:base': #>  #>     library  # create temporary directory dir <- fs::file_temp() dir.create(dir) config_path <- file.path(dir, \"_envsetup.yml\")  # write a config file to it file_conn <- file(config_path) writeLines( \"default:   paths:     data: '/demo/DEV/username/project1/data'     output: '/demo/DEV/username/project1/output'     programs: '/demo/DEV/username/project1/programs'\", file_conn) close(file_conn) # Set up the project envsetup_config <- config::get(file = config_path)  rprofile(envsetup_config) #> Attaching paths to envsetup:paths objects(\"envsetup:paths\") #> [1] \"auto_stored_envsetup_config\" \"data\"                        #> [3] \"output\"                      \"programs\"  data #> [1] \"/demo/DEV/username/project1/data\" output #> [1] \"/demo/DEV/username/project1/output\" programs #> [1] \"/demo/DEV/username/project1/programs\" default:   paths:     data: !expr list(DEV = '/demo/DEV/username/project1/data', PROD = '/demo/PROD/project1/data')     output: '/demo/DEV/username/project1/output'     programs: '/demo/DEV/username/project1/programs'     envsetup_environ: !expr Sys.setenv(ENVSETUP_ENVIRON = 'DEV'); 'DEV' file_conn <- file(config_path) writeLines(   paste0( \"default:   paths:     data: !expr list(DEV = '\",dir,\"/demo/DEV/username/project1/data', PROD = '\",dir,\"/demo/PROD/project1/data')     output: '\",dir,\"/demo/DEV/username/project1/output'     programs: '\",dir,\"/demo/DEV/username/project1/programs'     envsetup_environ: !expr Sys.setenv(ENVSETUP_ENVIRON = 'DEV'); 'DEV'\"   ), file_conn) close(file_conn) # Set up the project envsetup_config <- config::get(file = config_path)  rprofile(envsetup_config) #> Attaching paths to envsetup:paths objects(\"envsetup:paths\") #> [1] \"auto_stored_envsetup_config\" \"data\"                        #> [3] \"envsetup_environ\"            \"output\"                      #> [5] \"programs\"  data #> $DEV #> [1] \"/tmp/RtmpKsheEG/fileb6483475bd5f/demo/DEV/username/project1/data\" #>  #> $PROD #> [1] \"/tmp/RtmpKsheEG/fileb6483475bd5f/demo/PROD/project1/data\" output #> [1] \"/tmp/RtmpKsheEG/fileb6483475bd5f/demo/DEV/username/project1/output\" programs #> [1] \"/tmp/RtmpKsheEG/fileb6483475bd5f/demo/DEV/username/project1/programs\" envsetup_environ #> [1] \"DEV\" dir.create(file.path(dir, \"/demo/DEV/username/project1/data\"), recursive = TRUE) dir.create(file.path(dir, \"/demo/PROD/project1/data\"), recursive = TRUE) saveRDS(mtcars, file.path(dir, \"/demo/PROD/project1/data/mtcars.RDS\")) read_path(data, \"mtcars.RDS\") #> Read Path:/tmp/RtmpKsheEG/fileb6483475bd5f/demo/PROD/project1/data/mtcars.RDS #> [1] \"/tmp/RtmpKsheEG/fileb6483475bd5f/demo/PROD/project1/data/mtcars.RDS\" saveRDS(mtcars, file.path(dir, \"/demo/DEV/username/project1/data/mtcars.RDS\")) read_path(data, \"mtcars.RDS\") #> Read Path:/tmp/RtmpKsheEG/fileb6483475bd5f/demo/DEV/username/project1/data/mtcars.RDS #> [1] \"/tmp/RtmpKsheEG/fileb6483475bd5f/demo/DEV/username/project1/data/mtcars.RDS\" default:   paths:     data: !expr list(DEV = '/demo/DEV/username/project1/data', PROD = '/demo/PROD/project1/data')     output: '/demo/DEV/username/project1/output'     programs: '/demo/DEV/username/project1/programs'     envsetup_environ: !expr Sys.setenv(ENVSETUP_ENVIRON = 'DEV'); 'DEV' default:   paths:     data: !expr list(DEV = '/demo/DEV/username/project1/data', PROD = '/demo/PROD/project1/data')     output: '/demo/DEV/username/project1/output'     programs: '/demo/DEV/username/project1/programs'     envsetup_environ: !expr Sys.setenv(ENVSETUP_ENVIRON = 'DEV'); 'DEV'  prod:   paths:     envsetup_environ: !expr Sys.setenv(ENVSETUP_ENVIRON = 'PROD'); 'PROD' # overwrite the config file to the temporary directory previously setup file_conn <- file(config_path) writeLines(   paste0( \"default:   paths:     data: !expr list(DEV = '\",dir,\"/demo/DEV/username/project1/data', PROD = '\",dir,\"/demo/PROD/project1/data')     output: '\",dir,\"/demo/DEV/username/project1/output'     programs: '\",dir,\"/demo/DEV/username/project1/programs'     envsetup_environ: !expr Sys.setenv(ENVSETUP_ENVIRON = 'DEV'); 'DEV'  prod:   paths:     envsetup_environ: !expr Sys.setenv(ENVSETUP_ENVIRON = 'PROD'); 'PROD'\"   ), file_conn) close(file_conn) # setup the project envsetup_config <- config::get(file = config_path)  rprofile(envsetup_config) #> Attaching paths to envsetup:paths envsetup_environ #> [1] \"DEV\" envsetup_config <- config::get(file = config_path, config = \"prod\")  rprofile(envsetup_config) #> Attaching paths to envsetup:paths  envsetup_environ #> [1] \"PROD\" read_path(data, \"mtcars.RDS\") #> Read Path:/tmp/RtmpKsheEG/fileb6483475bd5f/demo/PROD/project1/data/mtcars.RDS #> [1] \"/tmp/RtmpKsheEG/fileb6483475bd5f/demo/PROD/project1/data/mtcars.RDS\""},{"path":"https://pharmaverse.github.io/envsetup/devel/articles/config.html","id":"autos","dir":"Articles","previous_headings":"","what":"AUTOS","title":"Create Your Config","text":"adds multiple environments search path, contain objects automatically sourced.","code":"default:   autos:"},{"path":"https://pharmaverse.github.io/envsetup/devel/articles/config.html","id":"a-working-example-1","dir":"Articles","previous_headings":"AUTOS","what":"A working example","title":"Create Your Config","text":"let’s go back Tidy McVerse. created custom, one function stored /demo/DEV/username/project1/script_library. add path autos config. Let’s look working example. create directory, place script folder … … call rprofile() passing config file. Now can see autos:dev_script_library added search path. test() available within environment, can execute function without sourcing. earth need ? Just previous data example, scripts can multiple locations qualification lifecycle. let’s say Tidy McVerse’s friend, Sir Purrr, function useful others specific project, already prod. Miss McVerse like use function dev Sir Purrr’s function prod. illustrate , let’s add prod script library config … … create PROD directory Sir Purrr’s function PROD. can overwrite _envsetup.yml … … overwrite project new configuration. Now can see prod_script_library added search path, function test() test2() available, can execute functions without need sourcing. can keep going create different configurations execution environment, similar PATHS . One example want source functions dev, executing prod. configuration example one way can handle situation, blanking dev script location executing prod.","code":"default:   autos:     dev_script_library: '/demo/DEV/username/project1/script_library' # create the temp directory dir <- fs::file_temp() dir.create(dir) dir.create(file.path(dir, \"/demo/DEV/username/project1/script_library\"), recursive = TRUE)  # write a function to the folder file_conn <- file(file.path(dir, \"/demo/DEV/username/project1/script_library/test.R\")) writeLines( \"test <- function(){print('test')}\", file_conn) close(file_conn)  # write the config config_path <- file.path(dir, \"_envsetup.yml\") file_conn <- file(config_path) writeLines(   paste0( \"default:   autos:     dev_script_library: '\", dir,\"/demo/DEV/username/project1/script_library'\"   ), file_conn) close(file_conn) envsetup_config <- config::get(file = config_path)  rprofile(envsetup_config) #> Attaching paths to envsetup:paths #> Attaching functions from /tmp/RtmpKsheEG/fileb648356d801d/demo/DEV/username/project1/script_library to autos:dev_script_library search() #>  [1] \".GlobalEnv\"               \"autos:dev_script_library\" #>  [3] \"package:envsetup\"         \"envsetup:paths\"           #>  [5] \"package:stats\"            \"package:graphics\"         #>  [7] \"package:grDevices\"        \"package:utils\"            #>  [9] \"package:datasets\"         \"package:methods\"          #> [11] \"Autoloads\"                \"tools:callr\"              #> [13] \"package:base\" objects(\"autos:dev_script_library\") #> [1] \"test\"  test() #> [1] \"test\" default:   autos:     dev_script_library: '/demo/DEV/username/project1/script_library'     prod_script_library: '/demo/PROD/project1/script_library' dir.create(file.path(dir, \"/demo/PROD/project1/script_library\"), recursive = TRUE)  # write a function to the folder file_conn <- file(file.path(dir, \"/demo/PROD/project1/script_library/test2.R\")) writeLines( \"test2 <- function(){print('test2')}\", file_conn) close(file_conn) # write the config file_conn <- file(config_path) writeLines(   paste0( \"default:   autos:     dev_script_library: '\", dir,\"/demo/DEV/username/project1/script_library'     prod_script_library: '\", dir,\"/demo/PROD/project1/script_library'\"   ), file_conn) close(file_conn) envsetup_config <- config::get(file = config_path)  rprofile(envsetup_config) #> Attaching paths to envsetup:paths #> Attaching functions from /tmp/RtmpKsheEG/fileb648356d801d/demo/PROD/project1/script_library to autos:prod_script_library #> Attaching functions from /tmp/RtmpKsheEG/fileb648356d801d/demo/DEV/username/project1/script_library to autos:dev_script_library search() #>  [1] \".GlobalEnv\"                \"autos:dev_script_library\"  #>  [3] \"autos:prod_script_library\" \"package:envsetup\"          #>  [5] \"envsetup:paths\"            \"package:stats\"             #>  [7] \"package:graphics\"          \"package:grDevices\"         #>  [9] \"package:utils\"             \"package:datasets\"          #> [11] \"package:methods\"           \"Autoloads\"                 #> [13] \"tools:callr\"               \"package:base\"  objects(\"autos:prod_script_library\") #> [1] \"test2\"  test() #> [1] \"test\" test2() #> [1] \"test2\" # write the config file_conn <- file(config_path) writeLines(   paste0( \"default:   autos:     dev_script_library: '\", dir,\"/demo/DEV/username/project1/script_library'     prod_script_library: '\", dir,\"/demo/PROD/project1/script_library' prod:   autos:     dev_script_library: ''\"   ), file_conn) close(file_conn)  envsetup_config <- config::get(file = config_path, config = \"prod\")  rprofile(envsetup_config)"},{"path":"https://pharmaverse.github.io/envsetup/devel/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicholas Masel. Author, maintainer. Mike Stackhouse. Author. Aidan Ceney. Author. Janssen R&D. Copyright holder, funder. Atorus Research LLC. Copyright holder.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Masel N, Stackhouse M, Ceney (2023). envsetup: Support Setup R Environment Clinical Trial Programming Workflows. R package version 0.0.1.9000.","code":"@Manual{,   title = {envsetup: Support the Setup of the R Environment for Clinical Trial Programming Workflows},   author = {Nicholas Masel and Mike Stackhouse and Aidan Ceney},   year = {2023},   note = {R package version 0.0.1.9000}, }"},{"path":[]},{"path":"https://pharmaverse.github.io/envsetup/devel/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Support the Setup of the R Environment for Clinical Trial Programming Workflows","text":"purpose package support setup R environment. two main features : autos automatically source files /directories environment paths consistently set path objects across projects /O implemented using configuration file allow easy, custom configurations can used multiple projects.","code":""},{"path":[]},{"path":"https://pharmaverse.github.io/envsetup/devel/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Support the Setup of the R Environment for Clinical Trial Programming Workflows","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"pharmaverse/envsetup\")"},{"path":"https://pharmaverse.github.io/envsetup/devel/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Support the Setup of the R Environment for Clinical Trial Programming Workflows","text":"Create _envsetup.yml configuration file specify autos paths store centrally. See vignette(\"config\") details create config. Create update .Rprofile read config call rprofile()","code":"library(envsetup)  # read configuration envsetup_config <- config::get(file = \"path/to/_envsetup.yml\")  # pass configuration to rprofile() to setup the environment rprofile(envsetup_config)"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/attach_auto.html","id":null,"dir":"Reference","previous_headings":"","what":"Attach a function directory — attach_auto","title":"Attach a function directory — attach_auto","text":"function used create rautos path. .R files given path sourced. Functions imported directory returned environment. environment can used attach search path. function called directly. apply autos, use set_autos().","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/attach_auto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attach a function directory — attach_auto","text":"","code":"attach_auto(path, name)"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/attach_auto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attach a function directory — attach_auto","text":"path Directory path name Directory name","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/attach_auto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Attach a function directory — attach_auto","text":"Environment containing functions","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/attach_auto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Attach a function directory — attach_auto","text":"","code":"if (FALSE) { attach_auto(\"./my_funcs\", \"my_autos\") }"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/build_from_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Build directory structure from a configuration file — build_from_config","title":"Build directory structure from a configuration file — build_from_config","text":"Build directory structure configuration file","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/build_from_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build directory structure from a configuration file — build_from_config","text":"","code":"build_from_config(config, root = NULL)"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/build_from_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build directory structure from a configuration file — build_from_config","text":"config configuration object config::get() containing paths#' root root directory build . Leave NULL using absolute paths.  Set working directory using relative paths.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/build_from_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build directory structure from a configuration file — build_from_config","text":"print directory tree-like format fs::dir_tree()","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/build_from_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build directory structure from a configuration file — build_from_config","text":"","code":"tmpdir <- tempdir()  hierarchy <- \"default:   paths:     data: !expr list(DEV = '/demo/DEV/username/project1/data',                      PROD = '/demo/PROD/project1/data')     output: !expr list(DEV = '/demo/DEV/username/project1/output',                        PROD = '/demo/PROD/project1/output')     programs: !expr list(DEV = '/demo/DEV/username/project1/programs',                          PROD = '/demo/PROD/project1/programs')     docs: !expr list(DEV = 'docs',                      PROD = 'docs')\"  writeLines(hierarchy, file.path(tmpdir, \"hierarchy.yml\"))  config <- config::get(file = file.path(tmpdir, \"hierarchy.yml\"))  build_from_config(config, tmpdir) #> ✔ Directories built #> /tmp/Rtmp8kCxaX #> ├── bslib-f8738d5a69cf9e017963174ab9cac1c4 #> ├── demo #> │   ├── DEV #> │   │   └── username #> │   │       └── project1 #> │   │           ├── data #> │   │           ├── output #> │   │           └── programs #> │   └── PROD #> │       └── project1 #> │           ├── data #> │           ├── output #> │           └── programs #> ├── docs #> ├── downlit #> └── fileb51b677ba5dc #>     ├── devel #>     │   ├── deps #>     │   │   ├── bootstrap-5.2.2 #>     │   │   └── jquery-3.6.0 #>     │   └── reference #>     │       └── figures #>     └── main #>         ├── articles #>         │   └── config_files #>         │       └── accessible-code-block-0.0.1 #>         ├── deps #>         │   ├── bootstrap-5.2.2 #>         │   └── jquery-3.6.0 #>         ├── news #>         └── reference #>             └── figures"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/detach_autos.html","id":null,"dir":"Reference","previous_headings":"","what":"Detach the autos from the current session — detach_autos","title":"Detach the autos from the current session — detach_autos","text":"function remove autos set search path","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/detach_autos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detach the autos from the current session — detach_autos","text":"","code":"detach_autos()"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/detach_autos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detach the autos from the current session — detach_autos","text":"","code":"if (FALSE) { detach_autos() }"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/init.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the R environment with envsetup — init","title":"Initialize the R environment with envsetup — init","text":"Initialize R environment envsetup","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the R environment with envsetup — init","text":"","code":"init(project = getwd(), config_path = NULL, create_paths = NULL)"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the R environment with envsetup — init","text":"project Character. path project directory. Defaults current working directory. config_path Character. path config file. Defaults NULL. create_paths Logical indicating missing paths created. Defaults NULL.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize the R environment with envsetup — init","text":"Logical. TRUE successful.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize the R environment with envsetup — init","text":"","code":"if (FALSE) { init() }"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/library.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around library to re-set autos — library","title":"Wrapper around library to re-set autos — library","text":"Autos need immediately follow global environment. wrapper around base::library() reset autos new library attached ensure behavior followed.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/library.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper around library to re-set autos — library","text":"... pass directly base::library","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/library.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper around library to re-set autos — library","text":"returns (invisibly) list attached packages","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/library.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper around library to re-set autos — library","text":"","code":"if (FALSE) { library(dplyr) }"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/read_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Read path — read_path","title":"Read path — read_path","text":"Check environment file return path first.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/read_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read path — read_path","text":"","code":"read_path(   lib,   filename,   full.path = TRUE,   envsetup_environ = Sys.getenv(\"ENVSETUP_ENVIRON\") )"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/read_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read path — read_path","text":"lib object containing paths environments directory filename name file like read full.path logical return path including file name envsetup_environ name environment like read file ; default values comes value system variable ENVSETUP_ENVIRON can set Sys.setenv(ENVSETUP_ENVIRON = \"environment name\")","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/read_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read path — read_path","text":"path first place file found","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/read_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read path — read_path","text":"environments searched depends current environment. example, workflow contains development (dev) area production area (prod), code executing dev environment, search dev prod. prod, search prod.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/read_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read path — read_path","text":"","code":"if (FALSE) { read_path(a_in, \"adsl.sas7bdat\") }"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/rprofile.html","id":null,"dir":"Reference","previous_headings":"","what":"Function used to pass through code to the .Rprofile — rprofile","title":"Function used to pass through code to the .Rprofile — rprofile","text":"Function used pass code .Rprofile","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/rprofile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function used to pass through code to the .Rprofile — rprofile","text":"","code":"rprofile(config)"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/rprofile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function used to pass through code to the .Rprofile — rprofile","text":"config configuration object config::get()","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/rprofile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function used to pass through code to the .Rprofile — rprofile","text":"Directory paths R autos","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/rprofile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function used to pass through code to the .Rprofile — rprofile","text":"","code":"if (FALSE) { rprofile(config::get(\"path/to/config/_envsetup.yml\")) }"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/validate_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a configuration file — validate_config","title":"Validate a configuration file — validate_config","text":"helper function help troubleshoot common problems can occur building configuration file.","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/validate_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a configuration file — validate_config","text":"","code":"validate_config(config)"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/validate_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a configuration file — validate_config","text":"config configuration object config::get()","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/validate_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a configuration file — validate_config","text":"findings validation checks","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/validate_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a configuration file — validate_config","text":"","code":"# temp location to store configuration files tmpdir <- tempdir() print(tmpdir) #> [1] \"/tmp/Rtmp8kCxaX\"  # Each path only points to one location, i.e. there is no hierarchy for a path no_hierarchy <- 'default:   paths:     data: \"/demo/DEV/username/project1/data\"     output: \"/demo/DEV/username/project1/output\"     programs: \"/demo/DEV/username/project1/programs\"'  writeLines(no_hierarchy, file.path(tmpdir, \"no_hierarchy.yml\"))  validate_config(config::get(file = file.path(tmpdir, \"no_hierarchy.yml\"))) #> ✔ paths are specified as part of your configuration #> ℹ no hierarchical paths found  # A path can point to multiple locations, i.e. there is a hierarchy hierarchy <- \"default:   paths:     data: !expr list(DEV = '/demo/DEV/username/project1/data',                      PROD = '/demo/PROD/project1/data')     output: !expr list(DEV = '/demo/DEV/username/project1/output',                        PROD = '/demo/PROD/project1/output')     programs: !expr list(DEV = '/demo/DEV/username/project1/programs',                          PROD = '/demo/PROD/project1/programs')     envsetup_environ: !expr Sys.setenv(ENVSETUP_ENVIRON = 'DEV'); 'DEV'\"  writeLines(hierarchy, file.path(tmpdir, \"hierarchy.yml\"))  validate_config(config::get(file = file.path(tmpdir, \"hierarchy.yml\"))) #> ✔ paths are specified as part of your configuration #> ✔ hierarchal paths found for: #>   data #>   output #>   programs  # A hierarchy is present for paths, but they are not named hierarchy_no_names <- \"default:   paths:     data: !expr list('/demo/DEV/username/project1/data', '/demo/PROD/project1/data')     output: !expr list('/demo/DEV/username/project1/output', '/demo/PROD/project1/output')     programs: !expr list('/demo/DEV/username/project1/programs', '/demo/PROD/project1/programs')     envsetup_environ: !expr Sys.setenv(ENVSETUP_ENVIRON = 'DEV'); 'DEV'\"   writeLines(hierarchy_no_names, file.path(tmpdir, \"hierarchy_no_names.yml\"))  validate_config(config::get(file = file.path(tmpdir, \"hierarchy_no_names.yml\"))) #> ✔ paths are specified as part of your configuration #> ✔ hierarchal paths found for: #>   data #>   output #>   programs #> • data has a hierarchy but they are not named.  Please update your configuration to name the hierarchy for data. #> • output has a hierarchy but they are not named.  Please update your configuration to name the hierarchy for output. #> • programs has a hierarchy but they are not named.  Please update your configuration to name the hierarchy for programs.   # No paths are specified no_paths <- \"default:   autos:     my_functions: '/demo/PROD/project1/R'\"  writeLines(no_paths, file.path(tmpdir, \"no_paths.yml\"))  validate_config(config::get(file = file.path(tmpdir, \"no_paths.yml\"))) #> ℹ no paths are specified as part of your configuration, skipping path valiation"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/write_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a file path from an envsetup object containing paths — write_path","title":"Retrieve a file path from an envsetup object containing paths — write_path","text":"Paths filtered produce lowest available level hierarchy paths based envsetup_environ","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/write_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a file path from an envsetup object containing paths — write_path","text":"","code":"write_path(   lib,   filename = NULL,   envsetup_environ = Sys.getenv(\"ENVSETUP_ENVIRON\") )"},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/write_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a file path from an envsetup object containing paths — write_path","text":"lib Object containing paths environments directory filename Name file like write envsetup_environ Name environment like write. Defaults ENVSETUP_ENVIRON environment variable","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/write_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a file path from an envsetup object containing paths — write_path","text":"path write","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/reference/write_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a file path from an envsetup object containing paths — write_path","text":"","code":"if (FALSE) { write_path(a_in, \"PROD\") }"},{"path":[]},{"path":"https://pharmaverse.github.io/envsetup/devel/news/index.html","id":"new-features-0-0-1-9000","dir":"Changelog","previous_headings":"","what":"New Features","title":"envsetup 0.0.1.9000","text":"init() added assist setting project use envsetup (#20, #21, #31) build_from_config() added add ability also use config create directories (#25) validate_config() added assist creating configuration files (#23) rprofile() automatically store configuration file standard location standard name, allowing library() use re-assign autos","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/news/index.html","id":"breaking-changes-0-0-1-9000","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"envsetup 0.0.1.9000","text":"library() now respect invisible return instead always returning list attached packages (#24) set_autos() now expects different YAML structure hierarchical filtering based ENVSETUP_ENVIRON (#28)","code":""},{"path":"https://pharmaverse.github.io/envsetup/devel/news/index.html","id":"bug-fixes-0-0-1-9000","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"envsetup 0.0.1.9000","text":"read_path() write_path() work correctly now even path objects exists environments (#36)","code":""}]
